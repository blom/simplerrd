module SimpleRRD
  class CDef < Command
		# CDEF:vname=RPN expression
		#	
		# This command creates a new set of data points (in memory only, not in
		# the RRD file) out of one or more other data series. The RPN
		# instructions are used to evaluate a mathematical function on each data
		# point. The resulting vname can then be used further on in the script,
		# just as if it were generated by a DEF instruction.  
		#  
		#   Example: "CDEF:mydatabits=mydata,8,*"
		def initialize(opts = {})
			@vname          = "obj#{self.object_id}"
			@rpn_expression = nil
		end

    attr_reader :vname, :rpn_expression

    def vname=(n)
      raise "Bad vname: #{n}" unless n.match(VNAME_REGEX)
      @vname = n
    end

    def rpn_expression=(ary)
      raise "Expected Array of RPN terms; got " + ary.class.to_s unless ary.is_a? Array
			clear_dependencies
      ary.each do |term|
        case term
        when Numeric: 
          next
        when Def:     
          add_dependency(term)
        when CDef:
          add_dependency(term)
        when String:
          next if CDEF_FUNCTIONS.include?(term)
          raise "Not a valid CDEF function: #{term}"
        else
          raise "Not sure what to do with a " + term.class.to_s
        end
      end
      @rpn_expression = ary
    end

    def expression_string
      terms = []
      @rpn_expression.each do |t|
        case t
        when Numeric: terms << t
        when Def:     terms << t.vname
        when VDef:    terms << t.vname 
        when CDef:    terms << t.vname 
        when String:  terms << t
        else raise "Unexpected term in RPN expression: #{t.inspect}"
        end
      end
      return terms.join(",")
    end

    def definition
      raise "No expression defined" unless @rpn_expression
      return "CDEF:#{vname}=#{expression_string}"
    end
  end
end
